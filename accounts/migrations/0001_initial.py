# Generated by Django 2.1 on 2018-08-13 06:41

import accounts.models
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(max_length=255, unique=True, verbose_name='Email ID')),
                ('is_active', models.BooleanField(default=True, verbose_name='Active')),
                ('is_doctor', models.BooleanField(default=False, verbose_name='User is Doctor')),
                ('is_patient', models.BooleanField(default=False, verbose_name='User is Patient')),
                ('is_staff', models.BooleanField(default=False)),
                ('is_admin', models.BooleanField(default=False, verbose_name='User is Admin')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
            managers=[
                ('objects', accounts.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Device',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('deviceid', models.CharField(help_text='Enter the Bluetooth pin of the devce.', max_length=7, unique=True, verbose_name='Device ID')),
                ('year_of_manufacture', models.DateField(max_length=8, verbose_name='Manufacturing Year')),
            ],
            options={
                'ordering': ['year_of_manufacture', 'patient'],
            },
        ),
        migrations.CreateModel(
            name='Doctor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(blank=True, max_length=250, verbose_name='First Name')),
                ('last_name', models.CharField(blank=True, max_length=250, verbose_name='Last Name')),
                ('mobileno', models.CharField(max_length=10, validators=[django.core.validators.RegexValidator(message='Enter valid 10 digits mobile number', regex='\\d{10}')], verbose_name='Mobile Number')),
                ('date_of_birth', models.DateField(max_length=8, verbose_name='Date of Birth')),
                ('age', models.IntegerField(verbose_name='Age')),
                ('gender', models.CharField(blank=True, choices=[('M', 'Male'), ('F', 'Female'), ('T', 'Transgender')], help_text='Please select your gender.', max_length=1, verbose_name='Gender')),
                ('speciality', models.CharField(max_length=250, verbose_name='Speciality')),
                ('years_of_experience', models.IntegerField(verbose_name='Years of Experience')),
                ('city', models.CharField(max_length=200, verbose_name='City')),
                ('patient_count', models.IntegerField(default=0, verbose_name='Count of Patients assigned')),
                ('image', models.ImageField(blank=True, upload_to='Profile Image/doctor_profile_image/')),
                ('doctor_id', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['years_of_experience', 'doctor_id'],
            },
        ),
        migrations.CreateModel(
            name='Patient',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(blank=True, max_length=250, verbose_name='First Name')),
                ('last_name', models.CharField(blank=True, max_length=250, verbose_name='Last Name')),
                ('patient_pin', models.CharField(max_length=7, null=True, verbose_name='Patient Device Pin')),
                ('mobileno', models.CharField(max_length=10, validators=[django.core.validators.RegexValidator(message='Enter valid 10 digits mobile number', regex='\\d{10}')], verbose_name='Mobile Number')),
                ('date_of_birth', models.DateField(max_length=8, verbose_name='Date of Birth')),
                ('age', models.IntegerField(verbose_name='Age')),
                ('gender', models.CharField(blank=True, choices=[('M', 'Male'), ('F', 'Female'), ('T', 'Transgender')], help_text='Please select your gender.', max_length=1, verbose_name='Gender')),
                ('city', models.CharField(max_length=100, verbose_name='City')),
                ('doc_assigned', models.BooleanField(default=False, verbose_name='Doctor Assigned')),
                ('image', models.ImageField(blank=True, upload_to='Profile Image/patient_profile_image')),
                ('doctor', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='accounts.Doctor')),
                ('patient_id', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['date_of_birth'],
            },
        ),
        migrations.CreateModel(
            name='Readings',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('blood_pressure', models.CharField(max_length=3, verbose_name='Blood Pressure')),
                ('heart_beat', models.CharField(max_length=3, verbose_name='HeartBeats per Minute')),
                ('SpO2', models.CharField(max_length=6, verbose_name='SpO2 value')),
                ('body_temparature', models.CharField(max_length=3, verbose_name='Body Temperature')),
                ('date_time', models.DateTimeField(verbose_name='Date & Time')),
                ('patient_id', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='accounts.Patient')),
            ],
            options={
                'ordering': ['date_time', 'patient_id'],
            },
        ),
        migrations.CreateModel(
            name='Relative',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=250, verbose_name='First Name')),
                ('last_name', models.CharField(max_length=250, verbose_name='Last Name')),
                ('gender', models.CharField(blank=True, choices=[('M', 'Male'), ('F', 'Female'), ('T', 'Transgender')], help_text='Please select your gender.', max_length=1, verbose_name='Gender')),
                ('age', models.IntegerField(null=True, verbose_name='Age')),
                ('mobileno', models.CharField(max_length=10, validators=[django.core.validators.RegexValidator(message='Enter valid 10 digits mobile number', regex='\\d{10}')], verbose_name='Mobile Number')),
                ('relation_to_user', models.CharField(max_length=150, verbose_name='Relation with User')),
                ('patient_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='accounts.Patient')),
            ],
            options={
                'ordering': ['patient_id', 'first_name', 'relation_to_user'],
            },
        ),
        migrations.AddField(
            model_name='device',
            name='patient',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='accounts.Patient'),
        ),
    ]
